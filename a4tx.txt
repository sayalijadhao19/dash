import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.ensemble import RandomForestClassifier
from sklearn.metrics import accuracy_score, classification_report, confusion_matrix
from sklearn.datasets import load_breast_cancer
import numpy as np

# Step 1: Load the Breast Cancer dataset
data = load_breast_cancer()
df = pd.DataFrame(data.data, columns=data.feature_names)
df['target'] = data.target  # target: 0 = malignant, 1 = benign

# Step 2: Data Preprocessing (optional but can include normalization or feature selection)
# In this case, the dataset is already well-preprocessed, but it's good practice to check for missing values or outliers.
print(f"Data Info:\n{df.info()}\n")

# Step 3: Splitting the data into features and target variable
X = df.drop(columns='target')  # Features (all columns except the target)
y = df['target']  # Target variable (0 = malignant, 1 = benign)

# Step 4: Split the dataset into training and testing sets (80% train, 20% test)
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Step 5: Model Training with RandomForestClassifier
model = RandomForestClassifier(n_estimators=100, random_state=42)
model.fit(X_train, y_train)

# Step 6: Model Evaluation: Making predictions and evaluating the model
y_pred = model.predict(X_test)

# Evaluating accuracy of the model
accuracy = accuracy_score(y_test, y_pred)
print(f"\nModel Accuracy: {accuracy * 100:.2f}%")

# Displaying the Classification Report and Confusion Matrix for further evaluation
print("\nClassification Report:\n", classification_report(y_test, y_pred))
print("Confusion Matrix:\n", confusion_matrix(y_test, y_pred))

# Step 7: Making recommendations based on model predictions
def prognosis_recommendation(features):
    """
    Function to provide prognosis recommendations based on model predictions.
    :param features: Array of patient features (values of the 30 features for a patient)
    :return: String recommendation based on predicted outcome
    """
    prediction = model.predict([features])  # Making prediction for the given features
    if prediction[0] == 0:
        return "High risk of malignant cancer. Immediate consultation and further tests recommended."
    else:
        return "Benign results. Routine monitoring suggested, but follow up with a healthcare provider."

# Step 8: Example Usage for Patient Recommendation
example_patient = X_test.iloc[0].values  # Selecting a random patient from the test set
recommendation = prognosis_recommendation(example_patient)  # Get prognosis recommendation for the patient
print("\nRecommendation for the Example Patient:")
print(recommendation)

# Optional: Show a few more example recommendations from the test set
print("\nAdditional Patient Recommendations:")
for i in range(1, 4):  # Displaying recommendations for first 3 patients in the test set
    patient_features = X_test.iloc[i].values
    rec = prognosis_recommendation(patient_features)
    print(f"Patient {i}: {rec}")
